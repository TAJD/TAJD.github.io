I"T<h1 id="summary">Summary</h1>

<p>This is a page of resources which I’ve found useful in rounding out my computer science knowledge. I had an awakening with one of the first interviews I had when I was looking for work in industry - I was asked a series of questions which I simply didn’t have a clue on, despite having written some tricky code. Well, that was then. The key learning points for me are:</p>

<ol>
  <li>Coding interviews are about solving specific problems which aim to demonstrate knowledge of solving classic computer science problems.</li>
  <li>Coding interviews are necessary to filter out candidates who aren’t prepared to put the work in.</li>
  <li>Preparing for coding interviews actually makes me a better programmer. The process of specifically practicing how to triage and solve problems helps me solve some of the problems I come across in my own work.</li>
</ol>

<h1 id="useful-books">Useful books</h1>

<p>There are two key books which are invaluable for those of a non computer science background.</p>

<ul>
  <li><a href="http://www.algorist.com/">The Algorithm Design Manual</a> is a key text on key algorithms and data structures. The author is quite chatty which makes it quite readable in my opinion. However I have spent too much time in academia so I might not be the best judge.</li>
  <li><a href="http://www.crackingthecodinginterview.com/">Cracking the coding interview</a> This appears to be a great guide on structuring ones approach to applying to jobs in the software industry. It’s a staple.</li>
</ul>

<h1 id="useful-websites-for-practicing-coding-problems">Useful websites for practicing coding problems</h1>

<ul>
  <li>https://www.hackerrank.com/</li>
  <li>https://app.codility.com/programmers/ I’ve come across this in quant interviews. The lessons are not bad.</li>
  <li>https://www.codewars.com/</li>
</ul>
:ET